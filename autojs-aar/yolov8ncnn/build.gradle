import java.security.MessageDigest

plugins {
    id 'com.android.library'
}

android {
    namespace 'com.tony.yolov8ncnn'
    compileSdk 33

    defaultConfig {
        minSdk 21
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    externalNativeBuild {
        cmake {
            version "3.10.2"
            path file('src/main/jni/CMakeLists.txt')
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(path: ':autojs-aar:opencv')
}

def zipArchives = [
        /**
         * ncnn预编译包
         * 20240410-android-vulkan
         */
        [
                'src' : 'https://github.com/Tencent/ncnn/releases/download/20240410/ncnn-20240410-android-vulkan.zip',
                'dest': 'src/main/jni'
        ],
        /**
         * 下载opencv4.8.0源码包 默认为4.2.0 和 AutoJS中的版本不匹配会产生冲突 这里进行修改
         */
        [
                'src' : 'https://github.com/opencv/opencv/releases/download/4.8.0/opencv-4.8.0-android-sdk.zip',
                'dest': 'src/main/jni'
        ]
]
/**
 * 首次导入最好手动运行一下这个task下载依赖的包
 */
task downloadAndExtractNcnnArchives(type: DefaultTask) {
    doFirst {
        println "Downloading and extracting archives including libs and models"
    }
    doLast {
        // Prepare cache folder for archives
        String cachePath = "cache"
        if (!file("${cachePath}").exists()) {
            mkdir "${cachePath}"
        }
        zipArchives.eachWithIndex { archive, index ->
            MessageDigest messageDigest = MessageDigest.getInstance('MD5')
            messageDigest.update(archive.src.bytes)
            String cacheName = new BigInteger(1, messageDigest.digest()).toString(32)
            // Download the target archive if not exists
            boolean copyFiles = !file("${archive.dest}").exists()
            if (!file("${cachePath}/${cacheName}.zip").exists()) {
                ant.get(src: archive.src, dest: file("${cachePath}/${cacheName}.zip"))
                copyFiles = true; // force to copy files from the latest archive files
            }
            // Extract the target archive if its dest path does not exists
            if (copyFiles) {
                copy {
                    from zipTree("${cachePath}/${cacheName}.zip")
                    into "${archive.dest}"
                }
            }
        }
    }
}
preBuild.dependsOn downloadAndExtractNcnnArchives